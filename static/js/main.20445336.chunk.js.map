{"version":3,"sources":["components/Editor/Editor.style.ts","components/Editor/index.ts","components/Editor/Editor.tsx","components/FileExplorer/FileExplorer.style.ts","components/FileExplorer/index.ts","components/FileExplorer/FileExplorer.tsx","components/Preview/Preview.style.ts","components/Preview/index.ts","components/Preview/Preview.tsx","logo.svg","App.style.ts","App.tsx","index.tsx"],"names":["StyleEditor","css","Editor","language","source","setSource","useEffect","hljs","registerLanguage","javascript","html","highlightAll","className","value","onChange","e","currentSource","currentTarget","parentNode","dataset","replicatedValue","handleChange","onKeyDown","spellCheck","StyleFileExplorer","FileExplorer","setLanguage","hangleClick","FilesElement","document","getElementById","querySelectorAll","forEach","li","classList","remove","add","id","onClick","StylePreview","Preview","preview","sourceCode","js","previewDocument","contentWindow","open","write","close","src","title","StyleApp","App","useState","logo","alt","height","ReactDOM","render","StrictMode"],"mappings":"gRAEMA,EAAcC,YAAH,42B,OCAFC,ECaA,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,SAAUC,EAA+B,EAA/BA,OAAQC,EAAuB,EAAvBA,UAE/BC,qBAAU,WACNC,IAAKC,iBAAiB,aAAcC,KACpCF,IAAKC,iBAAiB,OAAQE,KAC9BH,IAAKC,iBAAiB,MAAOP,OAC9B,IAEHK,qBAAU,WACNC,IAAKI,iBACN,CAACP,EAAQD,IAkBZ,OACI,mBAAKF,IAAKD,EAAV,UACI,4BACI,oBAAMY,UAAS,mBAAcT,GAA7B,SAA0CC,EAAOD,OAErD,wBACIU,MAAOT,EAAOD,GACdW,SAAU,SAAAC,GAAC,OAvBF,SAACA,GAClB,IAAMC,EAAa,2BACZZ,GADY,kBAEdD,EAAWY,EAAEE,cAAcJ,QAG7BE,EAAEE,cAAcC,aAClBH,EAAEE,cAAcC,WAA2BC,QAAQC,gBAAkBhB,EAAOD,IAE7EE,EAAUW,GAcaK,CAAaN,IAC5BO,UAZU,aAaVC,YAAY,QClDtBC,EAAoBvB,YAAH,ikBCARwB,ECOM,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,YAEdC,EAAc,SAACZ,EAAmCZ,GACpD,IAAMyB,EAAeC,SAASC,eAAe,SAC1CF,GACeA,EAAaG,iBAAiB,MACtCC,SAAQ,SAACC,GACXA,EAAGC,UAAUC,OAAO,eAG5BpB,EAAEE,cAAciB,UAAUE,IAAI,YAC9BV,EAAYvB,IAGhB,OACI,mBAAKkC,GAAG,QAAQpC,IAAMuB,EAAtB,SACI,4BACI,kBAAIZ,UAAU,WAAW0B,QAAS,SAAAvB,GAAC,OAAIY,EAAYZ,EAAG,SAAtD,wBACA,kBAAIuB,QAAS,SAAAvB,GAAC,OAAIY,EAAYZ,EAAG,QAAjC,uBACA,kBAAIuB,QAAS,SAAAvB,GAAC,OAAIY,EAAYZ,EAAG,OAAjC,4BC3BVwB,EAAetC,YAAH,uLCCHuC,ECWC,SAAC,GAAsB,IAArBpC,EAAoB,EAApBA,OAad,OAXAE,qBAAU,WACN,IAAMmC,EAA6BZ,SAASC,eAAe,WAC3D,GAAGW,EAAS,CAAC,IAAD,EACFC,EAAatC,EAAOM,KAAO,UAAYN,EAAOH,IAAM,mBAAqBG,EAAOuC,GAAK,aACrFC,EAAe,UAAGH,EAAQI,qBAAX,aAAG,EAAuBhB,SAChC,OAAfe,QAAe,IAAfA,KAAiBE,OACF,OAAfF,QAAe,IAAfA,KAAiBG,MAAML,GACR,OAAfE,QAAe,IAAfA,KAAiBI,WAEtB,CAAC5C,IAGA,mBAAKH,IAAKsC,EAAV,SACI,sBAAQU,IAAI,GAAGC,MAAM,iBAAiBb,GAAG,eC5BtC,MAA0B,iCCEnCc,EAAWlD,YAAH,gcC2BCmD,MApBf,WAAgB,IAAD,EACmBC,mBAAqB,QADxC,mBACNlD,EADM,KACIuB,EADJ,OAEe2B,mBAAkB,CAC1C3C,KAAM,GACNiC,GAAI,GACJ1C,IAAK,KALI,mBAENG,EAFM,KAEEC,EAFF,KAOb,OACE,mBAAKJ,IAAMkD,EAAX,UACE,gCACE,mBAAKF,IAAKK,EAAMC,IAAI,cAAcC,OAAO,SACzC,oBAAM5C,UAAU,SAAhB,wBAEF,YAAC,EAAD,CAAcc,YAAaA,IAC3B,YAAC,EAAD,CAAQvB,SAAUA,EAAUC,OAAQA,EAAQC,UAAWA,IACvD,YAAC,EAAD,CAASD,OAAQA,Q,OCnBvBqD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF9B,SAASC,eAAe,U","file":"static/js/main.20445336.chunk.js","sourcesContent":["import { css } from \"@emotion/react\";\n\nconst StyleEditor = css`\n    position: relative;\n    overflow: auto;\n    display: grid;\n    grid-area: 2 / 2 / 3 / 3;\n    outline: 1px solid #abb2bf;\n    background-color: #282c34;\n\n    &::after {\n        content: attr(data-replicated-value) \" \";\n        white-space: pre-wrap;\n        visibility: hidden;\n    }\n\n    textarea, pre, &::after {\n        grid-area: 1 / 1 / 2 / 2;\n        padding: 10px;\n        margin: 0px;\n        line-height: 1.5em;\n        font-family: 'Fira Code', monospace;;\n        font-size: 1rem;\n    }\n\n    code {\n        font-family: 'Fira Code', monospace;;\n    }\n\n    textarea {\n        background-color: transparent;\n        color: transparent;\n        caret-color: #abb2bf;\n        min-height: fit-content;\n        overflow: hidden;\n        border: none;\n        outline: none;\n        resize: none;\n    }\n`;\n\nexport {StyleEditor};","import Editor from \"./Editor\";\n\nexport default Editor;","/** @jsxImportSource @emotion/react */\nimport React, { Dispatch, SetStateAction, useEffect } from 'react';\nimport hljs from 'highlight.js';\nimport javascript from 'highlight.js/lib/languages/javascript';\nimport html from 'highlight.js/lib/languages/xml';\nimport css from 'highlight.js/lib/languages/css';\nimport 'highlight.js/styles/atom-one-dark.css';\n\nimport { StyleEditor } from './Editor.style';\ninterface IProps {\n    language: ULanguages,\n    source: ISource,\n    setSource: Dispatch<SetStateAction<ISource>>,\n};\n\nconst Editor = ({language, source, setSource}: IProps) => {\n\n    useEffect(() => {\n        hljs.registerLanguage('javascript', javascript);\n        hljs.registerLanguage('html', html);\n        hljs.registerLanguage('css', css);\n    }, []);\n\n    useEffect(() => {\n        hljs.highlightAll();\n    }, [source, language])\n\n    const handleChange = (e: React.FormEvent<HTMLTextAreaElement>) => {\n        const currentSource = {\n            ...source,\n            [language]: e.currentTarget.value,\n        };\n\n        if(e.currentTarget.parentNode)\n        (e.currentTarget.parentNode as HTMLElement).dataset.replicatedValue = source[language];\n\n        setSource(currentSource);\n    }\n\n    const handleKeyDown = () => {\n        //TODO\n    }\n\n    return (\n        <div css={StyleEditor}>\n            <pre>\n                <code className={`language-${language}`}>{source[language]}</code>\n            </pre>\n            <textarea\n                value={source[language]}\n                onChange={e => handleChange(e)}\n                onKeyDown={handleKeyDown}\n                spellCheck={false}\n            />\n        </div>\n    )\n}\n\nexport default Editor;","import { css } from '@emotion/react';\n\nconst StyleFileExplorer = css`\n    outline: 1px solid #abb2bf;\n    padding: 5px;\n    margin: 0px;\n    grid-area: 2 / 1 / 3 / 2;\n    font-family: 'Roboto Mono', monospace;\n    & ul {\n        padding: 0px;\n    }\n    & ul li {\n        margin: 5px 0px;\n        padding: 5px 10px;\n        cursor: pointer;\n        text-indent: 0;\n        background-color: #262831;\n        list-style-type: none;\n        border-radius: 3px;\n        transition: padding-left ease-in 100ms;\n    }\n    .selected {\n        padding-left: 30px;\n        background-color: #313440;\n    }\n`;\n\nexport { StyleFileExplorer };","import FileExplorer from './FileExplorer';\n\nexport default FileExplorer;","/** @jsxImportSource @emotion/react */\nimport { Dispatch, SetStateAction } from 'react';\n\nimport { StyleFileExplorer } from './FileExplorer.style';\n\ninterface IProps {\n    setLanguage: Dispatch<SetStateAction<ULanguages>>,\n};\n\nconst FileExplorer = ({ setLanguage }: IProps) => {\n\n    const hangleClick = (e: React.FormEvent<HTMLLIElement>, language: ULanguages) => {\n        const FilesElement = document.getElementById('Files') as HTMLDivElement;\n        if(FilesElement) {\n            const allLi = FilesElement.querySelectorAll('li');\n            allLi.forEach((li) => {\n                li.classList.remove('selected')\n            })\n        }\n        e.currentTarget.classList.add('selected');\n        setLanguage(language);\n    }\n\n    return (\n        <div id=\"Files\" css={ StyleFileExplorer }>\n            <ul>\n                <li className=\"selected\" onClick={e => hangleClick(e, \"html\")}>index.html</li>\n                <li onClick={e => hangleClick(e, \"css\")}>index.css</li>\n                <li onClick={e => hangleClick(e, \"js\")}>index.js</li>\n            </ul>\n        </div>\n    );\n}\n\nexport default FileExplorer;","import { css } from '@emotion/react';\nconst StylePreview = css`\n    display: flex;\n    grid-area: 2 / 3 / 3 / 4;\n    iframe {\n        flex-grow: 1;\n        border: none;\n        outline: 1px solid #abb2bf;\n    }\n`;\n\nexport { StylePreview };","import Preview from './Preview';\n\nexport default Preview;","/** @jsxImportSource @emotion/react */\nimport { useEffect } from 'react';\n\nimport { StylePreview } from './Preview.style';\n\ninterface IProps {\n    source: {\n        html: string;\n        js: string;\n        css: string;\n    },\n};\n\nconst Preview = ({source}: IProps) => {\n\n    useEffect(() => {\n        const preview: HTMLIFrameElement = document.getElementById('preview') as HTMLIFrameElement;\n        if(preview) {\n            const sourceCode = source.html + \"<style>\" + source.css + \"</style><script>\" + source.js + \"</script>\";\n            const previewDocument = preview.contentWindow?.document;\n            previewDocument?.open();\n            previewDocument?.write(sourceCode);\n            previewDocument?.close();\n        }\n    }, [source]);\n\n    return (\n        <div css={StylePreview}>\n            <iframe src=\"\" title=\"Preview Window\" id=\"preview\"></iframe>\n        </div>\n    )\n}\n\nexport default Preview;","export default __webpack_public_path__ + \"static/media/logo.1043c937.svg\";","import { css } from \"@emotion/react\";\n\nconst StyleApp = css`\n    display: grid;\n    grid-template-columns: 200px 1fr 1fr;\n    grid-template-rows: 50px 1fr;\n    height: 100vh;\n    color: #abb2bf;\n    background: #262831;\n    header {\n        grid-area: 1 / 1 / 2 / 4;\n        display: flex;\n        align-items: center;\n        gap: 10px;\n        margin-left: 5px;\n    }\n    .codoro {\n        font-family: 'Roboto Mono', monospace;\n        font-size: 2.5rem;\n    }\n`;\n\nexport { StyleApp };","/** @jsxImportSource @emotion/react */\nimport { useState } from 'react';\nimport Editor from './components/Editor';\nimport FileExplorer from './components/FileExplorer';\nimport Preview from './components/Preview';\nimport logo from './logo.svg';\n\nimport { StyleApp } from './App.style';\n\nfunction App() {\n  const [language, setLanguage] = useState<ULanguages>(\"html\");\n  const [source, setSource] = useState<ISource>({\n      html: \"\",\n      js: \"\",\n      css: \"\",\n  });\n  return (\n    <div css={ StyleApp }>\n      <header>\n        <img src={logo} alt=\"Codoro logo\" height=\"45px\"></img>\n        <span className=\"codoro\">Codoro_</span>\n      </header>\n      <FileExplorer setLanguage={setLanguage} />\n      <Editor language={language} source={source} setSource={setSource}/>\n      <Preview source={source} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}